{
  "hooks": {
    "SessionStart": [
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then ROOT=$(git rev-parse --show-toplevel); [ -x \"$ROOT/.codexplus/hooks/test_session_start.py\" ] && python3 \"$ROOT/.codexplus/hooks/test_session_start.py\"; fi; exit 0'",
            "timeout": 5,
            "description": "Test SessionStart hook execution"
          }
        ]
      }
    ],
    "UserPromptSubmit": [
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then ROOT=$(git rev-parse --show-toplevel); [ -x \"$ROOT/.codexplus/hooks/test_user_prompt_submit.py\" ] && python3 \"$ROOT/.codexplus/hooks/test_user_prompt_submit.py\"; fi; exit 0'",
            "timeout": 5,
            "description": "Test UserPromptSubmit hook execution and context injection"
          }
        ]
      }
    ],
    "PreToolUse": [
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then ROOT=$(git rev-parse --show-toplevel); [ -x \"$ROOT/.codexplus/hooks/test_pre_tool_use.py\" ] && python3 \"$ROOT/.codexplus/hooks/test_pre_tool_use.py\"; fi; exit 0'",
            "timeout": 5,
            "description": "Test PreToolUse hook execution and tool validation"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "SlashCommand/.*",
        "hooks": [
          {
            "type": "command",
            "command": "python3 $CLAUDE_PROJECT_DIR/.codexplus/hooks/posttool_marker.py",
            "timeout": 2
          }
        ]
      },
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then ROOT=$(git rev-parse --show-toplevel); [ -x \"$ROOT/.codexplus/hooks/test_post_tool_use.py\" ] && python3 \"$ROOT/.codexplus/hooks/test_post_tool_use.py\"; fi; exit 0'",
            "timeout": 5,
            "description": "Test PostToolUse hook execution and feedback generation"
          }
        ]
      }
    ],
    "Notification": [
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then ROOT=$(git rev-parse --show-toplevel); [ -x \"$ROOT/.codexplus/hooks/test_notification.py\" ] && python3 \"$ROOT/.codexplus/hooks/test_notification.py\"; fi; exit 0'",
            "timeout": 5,
            "description": "Test Notification hook execution and message processing"
          }
        ]
      }
    ],
    "Stop": [
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then ROOT=$(git rev-parse --show-toplevel); [ -x \"$ROOT/.codexplus/hooks/test_stop.py\" ] && python3 \"$ROOT/.codexplus/hooks/test_stop.py\"; fi; exit 0'",
            "timeout": 5,
            "description": "Test Stop hook execution and conversation cleanup"
          }
        ]
      }
    ],
    "PreCompact": [
      {
        "matcher": "manual",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then ROOT=$(git rev-parse --show-toplevel); [ -x \"$ROOT/.codexplus/hooks/test_pre_compact.py\" ] && python3 \"$ROOT/.codexplus/hooks/test_pre_compact.py\"; fi; exit 0'",
            "timeout": 5,
            "description": "Test PreCompact hook execution for manual triggers"
          }
        ]
      },
      {
        "matcher": "auto",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then ROOT=$(git rev-parse --show-toplevel); [ -x \"$ROOT/.codexplus/hooks/test_pre_compact.py\" ] && python3 \"$ROOT/.codexplus/hooks/test_pre_compact.py\"; fi; exit 0'",
            "timeout": 5,
            "description": "Test PreCompact hook execution for automatic triggers"
          }
        ]
      }
    ],
    "SessionEnd": [
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then ROOT=$(git rev-parse --show-toplevel); [ -x \"$ROOT/.codexplus/hooks/test_session_end.py\" ] && python3 \"$ROOT/.codexplus/hooks/test_session_end.py\"; fi; exit 0'",
            "timeout": 5,
            "description": "Test SessionEnd hook execution and cleanup operations"
          }
        ]
      }
    ]
  },
  "statusLine": {
    "command": "bash -c 'if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then ROOT=$(git rev-parse --show-toplevel); if [ -x \"$ROOT/.codexplus/hooks/git-header-status-only.sh\" ]; then exec \"$ROOT/.codexplus/hooks/git-header-status-only.sh\"; elif [ -x \"$ROOT/.claude/hooks/git-header.sh\" ]; then exec \"$ROOT/.claude/hooks/git-header.sh\"; fi; fi; exit 0'",
    "timeout": 10,
    "mode": "append"
  }
}